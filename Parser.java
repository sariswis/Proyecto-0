/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
public class Parser implements ParserConstants {
  public static void main(String args []) throws ParseException
  {
        Parser parser = new Parser(System.in);
    try
    {
                parser.program();
                System.out.println("\nThe program is valid! :)");
                Analyzer.printInfo();
    }
    catch (Exception e)
    {
       System.out.println("\nAn exception ocurred!");
       System.out.println(e.getMessage());
       parser.ReInit(System.in);
    }
    catch (Error e)
    {
       System.out.println("\nAn error ocurred!");
       System.out.println(e.getMessage());
    }
  }

/**
 * SECTION 3: PRODUCTION RULES
 */
  static final public 
void program() throws ParseException {
    jj_consume_token(ROBOT_R);
    declaration();
    procedures();
    blockInstructions();
    jj_consume_token(0);
}

  static final public void declaration() throws ParseException {Token var;
    jj_consume_token(VARS);
    var = jj_consume_token(NAME);
Analyzer.addVariable(var);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      var = jj_consume_token(NAME);
Analyzer.addVariable(var);
    }
    jj_consume_token(SEMICOLON);
}

  static final public void procedures() throws ParseException {
    jj_consume_token(PROCS);
    label_2:
    while (true) {
      procedureDef();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
}

  static final public void procedureDef() throws ParseException {Token function; Token var; int count = 0;
    function = jj_consume_token(NAME);
    jj_consume_token(O_BRACKET);
    jj_consume_token(V_BAR);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NAME:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      var = jj_consume_token(NAME);
Analyzer.addParam(var); count++;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        var = jj_consume_token(NAME);
Analyzer.addParam(var); count++;
      }
    }
    jj_consume_token(V_BAR);
    instruction();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      jj_consume_token(SEMICOLON);
      instruction();
    }
    jj_consume_token(C_BRACKET);
Analyzer.addFunction(function, count);
}

  static final public void blockInstructions() throws ParseException {
    jj_consume_token(O_BRACKET);
    instruction();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
      jj_consume_token(SEMICOLON);
      instruction();
    }
    jj_consume_token(C_BRACKET);
}

  static final public void instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case assignTo:
    case goTo:
    case move:
    case turn:
    case face:
    case put:
    case pick:
    case moveToThe:
    case moveInDir:
    case jumpToThe:
    case jumpInDir:
    case nop:{
      command();
      break;
      }
    case NAME:{
      procedureCall();
      break;
      }
    case IF:
    case WHILE:
    case REPEAT:{
      controlStructure();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void command() throws ParseException {Token number; Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case assignTo:{
      jj_consume_token(assignTo);
      jj_consume_token(COLON);
      number = jj_consume_token(NUMBER);
      jj_consume_token(COMMA);
      var = jj_consume_token(NAME);
Analyzer.assignVariable(number, var);
      break;
      }
    case goTo:{
      jj_consume_token(goTo);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case NAME:{
        var = jj_consume_token(NAME);
Analyzer.checkVariable(var);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case NAME:{
        var = jj_consume_token(NAME);
Analyzer.checkVariable(var);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case move:{
      jj_consume_token(move);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case NAME:{
        var = jj_consume_token(NAME);
Analyzer.checkVariable(var);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case turn:{
      jj_consume_token(turn);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT:{
        jj_consume_token(LEFT);
        break;
        }
      case RIGHT:{
        jj_consume_token(RIGHT);
        break;
        }
      case AROUND:{
        jj_consume_token(AROUND);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case face:{
      jj_consume_token(face);
      jj_consume_token(COLON);
      jj_consume_token(ORIENTATION);
      break;
      }
    case put:
    case pick:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case put:{
        jj_consume_token(put);
        break;
        }
      case pick:{
        jj_consume_token(pick);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case NAME:{
        var = jj_consume_token(NAME);
Analyzer.checkVariable(var);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      jj_consume_token(X_OBJECT);
      break;
      }
    case moveToThe:
    case jumpToThe:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case moveToThe:{
        jj_consume_token(moveToThe);
        break;
        }
      case jumpToThe:{
        jj_consume_token(jumpToThe);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case NAME:{
        var = jj_consume_token(NAME);
Analyzer.checkVariable(var);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT:{
        jj_consume_token(LEFT);
        break;
        }
      case RIGHT:{
        jj_consume_token(RIGHT);
        break;
        }
      case DIRECTION:{
        jj_consume_token(DIRECTION);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case moveInDir:
    case jumpInDir:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case moveInDir:{
        jj_consume_token(moveInDir);
        break;
        }
      case jumpInDir:{
        jj_consume_token(jumpInDir);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case NAME:{
        var = jj_consume_token(NAME);
Analyzer.checkVariable(var);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      jj_consume_token(ORIENTATION);
      break;
      }
    case nop:{
      jj_consume_token(nop);
      jj_consume_token(COLON);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void procedureCall() throws ParseException {Token function; Token var; int count = 0;
    function = jj_consume_token(NAME);
    jj_consume_token(COLON);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:
      case NAME:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case NAME:{
        var = jj_consume_token(NAME);
Analyzer.checkVariable(var);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
count++;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMBER:{
          jj_consume_token(NUMBER);
          break;
          }
        case NAME:{
          var = jj_consume_token(NAME);
Analyzer.checkVariable(var);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
count++;
      }
    }
Analyzer.checkFunction(function, count);
}

  static final public void controlStructure() throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(COLON);
      condition();
      jj_consume_token(THEN);
      jj_consume_token(COLON);
      blockInstructions();
      jj_consume_token(ELSE);
      jj_consume_token(COLON);
      blockInstructions();
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(COLON);
      condition();
      jj_consume_token(DO);
      jj_consume_token(COLON);
      blockInstructions();
      break;
      }
    case REPEAT:{
      jj_consume_token(REPEAT);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case NAME:{
        var = jj_consume_token(NAME);
Analyzer.checkVariable(var);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      blockInstructions();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void condition() throws ParseException {Token var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case facing:{
      jj_consume_token(facing);
      jj_consume_token(COLON);
      jj_consume_token(ORIENTATION);
      break;
      }
    case canPut:
    case canPick:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case canPut:{
        jj_consume_token(canPut);
        break;
        }
      case canPick:{
        jj_consume_token(canPick);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case NAME:{
        var = jj_consume_token(NAME);
Analyzer.checkVariable(var);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      jj_consume_token(X_OBJECT);
      break;
      }
    case canMoveInDir:
    case canJumpInDir:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case canMoveInDir:{
        jj_consume_token(canMoveInDir);
        break;
        }
      case canJumpInDir:{
        jj_consume_token(canJumpInDir);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case NAME:{
        var = jj_consume_token(NAME);
Analyzer.checkVariable(var);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      jj_consume_token(ORIENTATION);
      break;
      }
    case canMoveToThe:
    case canJumpToThe:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case canMoveToThe:{
        jj_consume_token(canMoveToThe);
        break;
        }
      case canJumpToThe:{
        jj_consume_token(canJumpToThe);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case NAME:{
        var = jj_consume_token(NAME);
Analyzer.checkVariable(var);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT:{
        jj_consume_token(LEFT);
        break;
        }
      case RIGHT:{
        jj_consume_token(RIGHT);
        break;
        }
      case DIRECTION:{
        jj_consume_token(DIRECTION);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case not:{
      jj_consume_token(not);
      jj_consume_token(COLON);
      condition();
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x53ffe00,0x0,0x0,0x0,0x0,0xc000,0x0,0x50000,0x0,0x0,0xa0000,0x0,0x1ffe00,0x0,0x0,0x0,0x0,0x0,0x5200000,0x30000000,0x0,0xc0000000,0x0,0x0,0x0,0x0,0xf8000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x20,0x10000,0x10000,0x20,0x80,0x80,0x10000,0x18000,0x18000,0x18000,0xe00,0x0,0x18000,0x0,0x18000,0x4600,0x0,0x18000,0x0,0x18000,0x18000,0x20,0x18000,0x18000,0x0,0x0,0x18000,0x0,0x18000,0x3,0x18000,0x4600,0x7,};
	}

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[51];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 33; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 51; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
