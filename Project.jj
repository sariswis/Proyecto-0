/**
 * SECTION 1: PARSER
 */

options
{
  STATIC = true;
  IGNORE_CASE = true;
}

PARSER_BEGIN(Parser)

public class Parser
{
  public static void main(String args []) throws ParseException
  {
	Parser parser = new Parser(System.in);
    try
    {
		parser.program();
		System.out.println("\nThe program is valid! :)");
		Analyzer.printInfo();
    }
    catch (Exception e)
    {
       System.out.println("\nAn exception ocurred!");
       System.out.println(e.getMessage());
       parser.ReInit(System.in);
    }
    catch (Error e)
    {
       System.out.println("\nAn error ocurred!");
       System.out.println(e.getMessage());
    }
  }
}

PARSER_END(Parser)

/**
 * SECTION 2: TOKENS
 */

SKIP :
{
  " " | "\r" | "\t" | "\n" | "\f"
}


TOKEN : /* Keywords */
{
  < ROBOT_R : "robot_r" >
| < VARS : "vars" >
| < PROCS : "procs" >
}

TOKEN : /* Commands */
{
  < assignTo : "assignto" >
| < goTo : "goto" >
| < move : "move" >
| < turn : "turn" >
| < face : "face" >
| < put : "put" >
| < pick : "pick" >
| < moveToThe : "movetothe" >
| < moveInDir : "moveindir" >
| < jumpToThe : "jumptothe" >
| < jumpInDir : "jumpindir" >
| < nop : "nop" >
}

TOKEN : /* Control Structures */
{
  < IF : "if" >
| < THEN : "then" >
| < ELSE : "else" >
| < WHILE : "while" >
| < DO : "do" >
| < REPEAT : "repeat" >
}

TOKEN : /* Conditions */
{
  < facing : "facing" >
| < canPut : "canput" >
| < canPick : "canpick" >
| < canMoveInDir : "canmoveindir" >
| < canJumpInDir : "canjumpindir" >
| < canMoveToThe : "canmovetothe" >
| < canJumpToThe : "canjumptothe" >
| < not : "not" >
}

TOKEN : /* Symbols */
{
  < O_BRACKET : "[" >
| < C_BRACKET : "]" >
| < COMMA : "," >
| < COLON : ":" >
| < SEMICOLON : ";" >
| < V_BAR : "|" >
}

TOKEN : /* Variables */
{
  < LEFT : "left" >
| < RIGHT : "right" >
| < AROUND : "around" >
| < ORIENTATION : "north" | "south" | "east" | "west" >
| < X_OBJECT : "balloons" | "chips" >
| < DIRECTION : "front" | "back" >
| < NUMBER : (<DIGIT>)+ >
| < NAME : <LETTER> (<LETTER> | <DIGIT>)* >
| < #LETTER   : ["a"-"z","A"-"Z"] >
| < #DIGIT : ["0"-"9"] >
}

/**
 * SECTION 3: PRODUCTION RULES
 */

void program() : {} {
	<ROBOT_R> (declaration())? (procedures())? blockInstructionsF() <EOF>
}

void declaration() : {Token var;} {
	<VARS> 
	var = <NAME> {Analyzer.addVariable(var);}
	(<COMMA> var = <NAME> {Analyzer.addVariable(var);})* 
	<SEMICOLON>
}

void procedures() : {} {
  	<PROCS> (procedureDef())+
}

void procedureDef() : {Token function; Token var; int count = 0;} {
	function = <NAME>
	<O_BRACKET>
	<V_BAR> 
	(var = <NAME> {Analyzer.addParam(var); count++;} (<COMMA> var = <NAME> {Analyzer.addParam(var); count++;})*)* 
	<V_BAR>
	instruction() (<SEMICOLON> instruction())*
	<C_BRACKET>
	{Analyzer.addFunction(function, count);} 
}

void blockInstructions() : {} {
	<O_BRACKET>
	instruction() (<SEMICOLON> instruction())*
	<C_BRACKET>
}

void instruction() : {} {
	command() | procedureCall() | controlStructure() 
}

void command() : {Token number; Token var;} {
  	//toThe -> Direction, inDir -> Orientation
	<assignTo> <COLON> number = <NUMBER> <COMMA> var = <NAME> {Analyzer.assignVariable(number, var);}
	| <goTo> <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariable(var);}) <COMMA> (<NUMBER> | var = <NAME> {Analyzer.checkVariable(var);})
	| <move> <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariable(var);})
	| <turn> <COLON> (<LEFT> | <RIGHT> | <AROUND>)
	| <face> <COLON> <ORIENTATION>
	| (<put> | <pick>) <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariable(var);}) <COMMA> <X_OBJECT>
	| (<moveToThe> | <jumpToThe>) <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariable(var);}) <COMMA> (<LEFT> | <RIGHT> | <DIRECTION>)
	| (<moveInDir> | <jumpInDir>) <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariable(var);}) <COMMA> <ORIENTATION>
	| <nop> <COLON>
}

void procedureCall() : {Token function; Token var; int count = 0;} {
	function = <NAME> <COLON> 
	((<NUMBER> | var = <NAME> {Analyzer.checkVariable(var);}) {count++;} (<COMMA> (<NUMBER> | var = <NAME> {Analyzer.checkVariable(var);}) {count++;})*)*
	{Analyzer.checkFunction(function, count);}
}

void controlStructure() : {Token var;} {
	<IF> <COLON> condition() <THEN> <COLON> (blockInstructions() | instruction()) <ELSE> <COLON> (blockInstructions() | instruction())
	| <WHILE> <COLON> condition() <DO> <COLON> (blockInstructions() | instruction()) 
	| <REPEAT> <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariable(var);}) (blockInstructions() | instruction()) 
}

void condition() : {Token var;} {
  	//toThe -> Direction, inDir -> Orientation
	<facing> <COLON> <ORIENTATION>
	| (<canPut> | <canPick>) <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariable(var);}) <COMMA> <X_OBJECT>
	| (<canMoveInDir> | <canJumpInDir>) <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariable(var);}) <COMMA> <ORIENTATION>
	| (<canMoveToThe> | <canJumpToThe>) <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariable(var);}) <COMMA> (<LEFT> | <RIGHT> | <DIRECTION>)
	| <not> <COLON> condition()
}

void blockInstructionsF() : {} {
	<O_BRACKET>
	instructionF() (<SEMICOLON> instructionF())*
	<C_BRACKET>
}

void instructionF() : {} {
	commandF() | procedureCallF() | controlStructureF() 
}

void commandF() : {Token number; Token var;} {
  	//toThe -> Direction, inDir -> Orientation
	<assignTo> <COLON> number = <NUMBER> <COMMA> var = <NAME> {Analyzer.assignVariable(number, var);}
	| <goTo> <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariableF(var);}) <COMMA> (<NUMBER> | var = <NAME> {Analyzer.checkVariableF(var);})
	| <move> <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariableF(var);})
	| <turn> <COLON> (<LEFT> | <RIGHT> | <AROUND>)
	| <face> <COLON> <ORIENTATION>
	| (<put> | <pick>) <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariableF(var);}) <COMMA> <X_OBJECT>
	| (<moveToThe> | <jumpToThe>) <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariableF(var);}) <COMMA> (<LEFT> | <RIGHT> | <DIRECTION>)
	| (<moveInDir> | <jumpInDir>) <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariableF(var);}) <COMMA> <ORIENTATION>
	| <nop> <COLON>
}

void procedureCallF() : {Token function; Token var; int count = 0;} {
	function = <NAME> <COLON> 
	((<NUMBER> | var = <NAME> {Analyzer.checkVariableF(var);}) {count++;} (<COMMA> (<NUMBER> | var = <NAME> {Analyzer.checkVariableF(var);}) {count++;})*)*
	{Analyzer.checkFunction(function, count);}
}

void controlStructureF() : {Token var;} {
	<IF> <COLON> conditionF() <THEN> <COLON> (blockInstructionsF() | instructionF()) <ELSE> <COLON> (blockInstructionsF() | instructionF())
	| <WHILE> <COLON> conditionF() <DO> <COLON> (blockInstructionsF() | instructionF()) 
	| <REPEAT> <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariableF(var);}) (blockInstructionsF() | instructionF()) 
}

void conditionF() : {Token var;} {
  	//toThe -> Direction, inDir -> Orientation
	<facing> <COLON> <ORIENTATION>
	| (<canPut> | <canPick>) <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariableF(var);}) <COMMA> <X_OBJECT>
	| (<canMoveInDir> | <canJumpInDir>) <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariableF(var);}) <COMMA> <ORIENTATION>
	| (<canMoveToThe> | <canJumpToThe>) <COLON> (<NUMBER> | var = <NAME> {Analyzer.checkVariableF(var);}) <COMMA> (<LEFT> | <RIGHT> | <DIRECTION>)
	| <not> <COLON> conditionF()
}





